{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-15T09:54:00.859Z",
    "end": "2025-04-15T09:54:01.121Z",
    "duration": 262,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e88ed2f2-cadf-457e-8ace-94c2af5563b6",
      "title": "",
      "fullFile": "cypress/api-test/06-handle-async.js",
      "file": "cypress/api-test/06-handle-async.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "021c8ad3-27d5-4944-aede-f688128c0901",
          "title": "Handling async request in Cypress",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to wait until a request resolved",
              "fullTitle": "Handling async request in Cypress should be able to wait until a request resolved",
              "timedOut": null,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// let response = await cy.request({\n//     method: DEFAULT.get,\n//     url: 'https://jsonplaceholder.typicode.com/posts' ,\n// })\n// expect(response.status).to.eq(200);\n// expect(response.body.length).to.eq(100);\n// let deleteReq = await new Cypress.Promise((resolve,reject) => {\n//     cy.request({\n//         method: DEFAULT.delete,\n//         url: 'https://jsonplaceholder.typicode.com/posts/1' ,\n//     }).then(val => resolve(val))\n// })\n// cy.log(JSON.stringify(deleteReq))\n//CRUD\n// let url = 'https://jsonplaceholder.typicode.com/posts'\nlet url = Cypress.env('baseUrl');\n// syntax : npm run test --spec (nơi muốn chạy) --env baseUtl = https://jsonplaceholder.typicode.com/posts\nlet header = {\n  'Content-type': 'application/json; charset=UTF-8'\n};\nlet createdPostBody = {\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\nlet updatedPostBody = {\n  id: 1,\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\ncy.createPost(createdPostBody).then(res => {\n  cy.getPost((Number(res.body.id) - 1).toString()).then(res => {\n    cy.updatePost(updatedPostBody).then(res => {\n      cy.request({\n        method: _methods.DEFAULT.delete,\n        url: url + '/' + res.body.id\n      }).then(res => {\n        cy.log(JSON.stringify(res));\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "80c64db9-b6bd-4022-b0e8-c59fbf81aae2",
              "parentUUID": "021c8ad3-27d5-4944-aede-f688128c0901",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80c64db9-b6bd-4022-b0e8-c59fbf81aae2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}