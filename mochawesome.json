{
  "stats": {
    "suites": 6,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-04-15T09:53:40.712Z",
    "end": "2025-04-15T09:54:01.121Z",
    "duration": 20409
  },
  "results": [
    {
      "uuid": "c01bfe5c-038b-41f7-b754-583588b2b607",
      "title": "",
      "fullFile": "cypress/api-test/02-GET-request_more.js",
      "file": "cypress/api-test/02-GET-request_more.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "820847c2-93bf-470f-b72f-c17fbc1d56c0",
          "title": "Test GET Request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send GET request and veryfi the response",
              "fullTitle": "Test GET Request should be able to send GET request and veryfi the response",
              "timedOut": null,
              "duration": 174,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  url: 'https://jsonplaceholder.typicode.com/posts',\n  method: 'GET'\n}).then(response => {\n  // destructure\n  let {\n    status,\n    body\n  } = response;\n  expect(status).to.eq(200);\n  expect(body.length).eq(100);\n  // get a ramdom element from array object\n  let ramdomObject = body[Math.floor(Math.random() * body.length)];\n  // veryfication\n  veryfiNotEmpty('userID', ramdomObject.userId);\n  veryfiNotEmpty('ID', ramdomObject.id);\n  veryfiNotEmpty('Title', ramdomObject.title);\n  veryfiNotEmpty('Body', ramdomObject.body);\n});",
              "err": {},
              "uuid": "5f5b9b6c-8900-4403-9909-5c1a607cc59b",
              "parentUUID": "820847c2-93bf-470f-b72f-c17fbc1d56c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f5b9b6c-8900-4403-9909-5c1a607cc59b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 174,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7d1aa1c9-f9cf-4ace-8103-efc2432fa73a",
      "title": "",
      "fullFile": "cypress/api-test/03-POST-request.js",
      "file": "cypress/api-test/03-POST-request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "694588f9-ea5a-4a4a-8b15-922cb31e4a05",
          "title": "Test POST request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send a POST request and get response",
              "fullTitle": "Test POST request should be able to send a POST request and get response",
              "timedOut": null,
              "duration": 348,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let url = 'https://jsonplaceholder.typicode.com/posts';\nlet header = {\n  'Content-type': 'application/json; charset=UTF-8'\n};\nlet requestBody = {\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\nlet requestObject = {\n  method: 'POST',\n  url: url,\n  headers: header,\n  body: requestBody\n};\ncy.request(requestObject).then(res => {\n  let {\n    status,\n    body\n  } = res;\n  cy.log(JSON.stringify(body));\n  expect(status).to.eq(201, 'Status is not 200');\n  let {\n    userId,\n    id,\n    title\n  } = body;\n  let responseBody = body.body;\n  //Verification\n  expect(userId).to.eq(requestBody.userId, 'verifing userId');\n  expect(id).to.eq(101, 'verifing Id');\n  expect(title).to.eq(requestBody.title, 'verifing Title');\n  expect(responseBody).to.eq(requestBody.body, 'verifing Body');\n});",
              "err": {},
              "uuid": "f99545b3-eb6a-40c9-852e-1aab7af5b5d4",
              "parentUUID": "694588f9-ea5a-4a4a-8b15-922cb31e4a05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f99545b3-eb6a-40c9-852e-1aab7af5b5d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 348,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2ab8869e-8ff2-46f6-bb20-d25d76e1351e",
      "title": "",
      "fullFile": "cypress/api-test/04-PUT-request.js",
      "file": "cypress/api-test/04-PUT-request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ce760f20-6b16-4a54-94bd-cbce9eda7025",
          "title": "Test PUT method request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send a request with PUT method",
              "fullTitle": "Test PUT method request should be able to send a request with PUT method",
              "timedOut": null,
              "duration": 743,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let body = {\n  id: 1,\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\ncy.request({\n  method: 'PUT',\n  url: 'https://jsonplaceholder.typicode.com/posts/1',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8'\n  },\n  body: body\n}).then(res => {\n  let {\n    status\n  } = res;\n  let resBody = res.body;\n  let {\n    userId,\n    id,\n    title,\n    body\n  } = resBody;\n  expect(status).to.eq(200, 'verifing responce header');\n  expect(userId).to.eq(resBody.userId, 'verifing userId');\n  expect(id).to.eq(resBody.id, 'verifing Id');\n  expect(title).to.eq(resBody.title, 'verifing Title');\n  expect(body).to.eq(resBody.body, 'verifing Body');\n});",
              "err": {},
              "uuid": "cb2c4e68-69ae-4167-bda6-0ebd06b9be13",
              "parentUUID": "ce760f20-6b16-4a54-94bd-cbce9eda7025",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb2c4e68-69ae-4167-bda6-0ebd06b9be13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 743,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4c9ca045-6b6d-4278-a132-773a9521c165",
      "title": "",
      "fullFile": "cypress/api-test/05-DELETE-request.js",
      "file": "cypress/api-test/05-DELETE-request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7010d6ea-5950-4b2e-b36f-225cb0178511",
          "title": "Testing DELETE method",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send a DELETE request with Cypress",
              "fullTitle": "Testing DELETE method should be able to send a DELETE request with Cypress",
              "timedOut": null,
              "duration": 737,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: _methods.DEFAULT.delete,\n  url: 'https://jsonplaceholder.typicode.com/posts/1'\n}).then(res => {\n  expect(res.status).to.eq(200, 'verifing responce header');\n});",
              "err": {},
              "uuid": "cb6641ae-0770-4d9e-895e-afe24344f60d",
              "parentUUID": "7010d6ea-5950-4b2e-b36f-225cb0178511",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb6641ae-0770-4d9e-895e-afe24344f60d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 737,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e88ed2f2-cadf-457e-8ace-94c2af5563b6",
      "title": "",
      "fullFile": "cypress/api-test/06-handle-async.js",
      "file": "cypress/api-test/06-handle-async.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "021c8ad3-27d5-4944-aede-f688128c0901",
          "title": "Handling async request in Cypress",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to wait until a request resolved",
              "fullTitle": "Handling async request in Cypress should be able to wait until a request resolved",
              "timedOut": null,
              "duration": 104,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// let response = await cy.request({\n//     method: DEFAULT.get,\n//     url: 'https://jsonplaceholder.typicode.com/posts' ,\n// })\n// expect(response.status).to.eq(200);\n// expect(response.body.length).to.eq(100);\n// let deleteReq = await new Cypress.Promise((resolve,reject) => {\n//     cy.request({\n//         method: DEFAULT.delete,\n//         url: 'https://jsonplaceholder.typicode.com/posts/1' ,\n//     }).then(val => resolve(val))\n// })\n// cy.log(JSON.stringify(deleteReq))\n//CRUD\n// let url = 'https://jsonplaceholder.typicode.com/posts'\nlet url = Cypress.env('baseUrl');\n// syntax : npm run test --spec (nơi muốn chạy) --env baseUtl = https://jsonplaceholder.typicode.com/posts\nlet header = {\n  'Content-type': 'application/json; charset=UTF-8'\n};\nlet createdPostBody = {\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\nlet updatedPostBody = {\n  id: 1,\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\ncy.createPost(createdPostBody).then(res => {\n  cy.getPost((Number(res.body.id) - 1).toString()).then(res => {\n    cy.updatePost(updatedPostBody).then(res => {\n      cy.request({\n        method: _methods.DEFAULT.delete,\n        url: url + '/' + res.body.id\n      }).then(res => {\n        cy.log(JSON.stringify(res));\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "80c64db9-b6bd-4022-b0e8-c59fbf81aae2",
              "parentUUID": "021c8ad3-27d5-4944-aede-f688128c0901",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80c64db9-b6bd-4022-b0e8-c59fbf81aae2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "66c5ee16-abaf-48b7-a820-cb08dcf2574f",
      "title": "",
      "fullFile": "cypress/api-test/01-GET-request.js",
      "file": "cypress/api-test/01-GET-request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e4924735-13af-4918-b9d8-ef4f9cae632b",
          "title": "Test GET Request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send GET request and veryfi the response",
              "fullTitle": "Test GET Request should be able to send GET request and veryfi the response",
              "timedOut": null,
              "duration": 379,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  url: 'https://jsonplaceholder.typicode.com/posts',\n  method: 'GET'\n}).then(response => {\n  // cy.log(JSON.stringify(response.body))\n  expect(response.status).to.eq(200);\n  expect(response.body.length).to.eq(100);\n});",
              "err": {},
              "uuid": "7072673f-2dc2-40f8-b772-aa6d1fab29a1",
              "parentUUID": "e4924735-13af-4918-b9d8-ef4f9cae632b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7072673f-2dc2-40f8-b772-aa6d1fab29a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 379,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}